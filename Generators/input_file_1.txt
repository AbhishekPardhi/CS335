Goal:
	CompilationUnit	{ $$ = create_node("Goal", $1); } 
;

Type:
	PrimitiveType	{ $$ = create_node("Type", $1); } 
|	ReferenceType	{ $$ = create_node("Type", $1); } 
;

PrimitiveType:
	NumericType	{ $$ = create_node("PrimitiveType", $1); } 
|	BOOLEAN	{ $$ = create_node("PrimitiveType", $1); } 
;

NumericType:
	IntegralType	{ $$ = create_node("NumericType", $1); } 
|	FloatingPointType	{ $$ = create_node("NumericType", $1); } 
;

IntegralType:
	BYTE 	{ $$ = create_node("IntegralType", $1); } 
|	SHORT 	{ $$ = create_node("IntegralType", $1); } 
|	INT 	{ $$ = create_node("IntegralType", $1); } 
|	LONG 	{ $$ = create_node("IntegralType", $1); } 
|	CHAR	{ $$ = create_node("IntegralType", $1); } 
;

FloatingPointType:
	FLOAT 	{ $$ = create_node("FloatingPointType", $1); } 
|	DOUBLE	{ $$ = create_node("FloatingPointType", $1); } 
;

ReferenceType:
	ClassOrInterfaceType	{ $$ = create_node("ReferenceType", $1); } 
|	ArrayType	{ $$ = create_node("ReferenceType", $1); } 
;

ClassOrInterfaceType:
	Name	{ $$ = create_node("ClassOrInterfaceType", $1); } 
;

ClassType:
	ClassOrInterfaceType	{ $$ = create_node("ClassType", $1); } 
;

InterfaceType:
	ClassOrInterfaceType	{ $$ = create_node("InterfaceType", $1); } 
;

ArrayType:
	PrimitiveType LSPAR RSPAR 	{ $$ = create_node("ArrayType", $1, $2, $3); } 
|	Name LSPAR RSPAR	{ $$ = create_node("ArrayType", $1, $2, $3); } 
|	ArrayType LSPAR RSPAR	{ $$ = create_node("ArrayType", $1, $2, $3); } 
;


Name:
	SimpleName	{ $$ = create_node("Name", $1); } 
|	QualifiedName	{ $$ = create_node("Name", $1); } 
;

SimpleName:
	IDENTIFIER	{ $$ = create_node("SimpleName", $1); } 
;

QualifiedName:
	Name DOT IDENTIFIER	{ $$ = create_node("QualifiedName", $1, $2, $3); } 
;

CompilationUnit:
	PackageDeclaration ImportDeclarations TypeDeclarations	{ $$ = create_node("CompilationUnit", $1, $2, $3); } 
|	ImportDeclarations TypeDeclarations	{ $$ = create_node("CompilationUnit", $1, $2); } 
|	PackageDeclaration TypeDeclarations	{ $$ = create_node("CompilationUnit", $1, $2); } 
|	TypeDeclarations	{ $$ = create_node("CompilationUnit", $1); } 
|	PackageDeclaration ImportDeclarations 	{ $$ = create_node("CompilationUnit", $1, $2); } 
|	ImportDeclarations 	{ $$ = create_node("CompilationUnit", $1); } 
|	PackageDeclaration 	{ $$ = create_node("CompilationUnit", $1); } 
|	{}	{ $$ = create_node("CompilationUnit", $1); } 
;


ImportDeclarations:
	ImportDeclaration	{ $$ = create_node("ImportDeclarations", $1); } 
|	ImportDeclarations ImportDeclaration	{ $$ = create_node("ImportDeclarations", $1, $2); } 
;

TypeDeclarations:
	TypeDeclaration	{ $$ = create_node("TypeDeclarations", $1); } 
|	TypeDeclarations TypeDeclaration	{ $$ = create_node("TypeDeclarations", $1, $2); } 
;

PackageDeclaration:
	PACKAGE Name SEMICOLON	{ $$ = create_node("PackageDeclaration", $1, $2, $3); } 
;

ImportDeclaration:
	SingleTypeImportDeclaration	{ $$ = create_node("ImportDeclaration", $1); } 
|	TypeImportOnDemandDeclaration	{ $$ = create_node("ImportDeclaration", $1); } 
;

SingleTypeImportDeclaration:
	IMPORT Name SEMICOLON	{ $$ = create_node("SingleTypeImportDeclaration", $1, $2, $3); } 
;

TypeImportOnDemandDeclaration:
	IMPORT Name DOT ASTERISK SEMICOLON	{ $$ = create_node("TypeImportOnDemandDeclaration", $1, $2, $3, $4, $5); } 
;


TypeDeclaration:
	ClassDeclaration	{ $$ = create_node("TypeDeclaration", $1); } 
|	InterfaceDeclaration	{ $$ = create_node("TypeDeclaration", $1); } 
|	SEMICOLON	{ $$ = create_node("TypeDeclaration", $1); } 
;

Modifiers:
	Modifier	{ $$ = create_node("Modifiers", $1); } 
|	Modifiers Modifier	{ $$ = create_node("Modifiers", $1, $2); } 
;

Modifier:
	PUBLIC	{ $$ = create_node("Modifier", $1); } 
|	PRIVATE	{ $$ = create_node("Modifier", $1); } 
|	STATIC	{ $$ = create_node("Modifier", $1); } 
|	FINAL	{ $$ = create_node("Modifier", $1); } 
;

ClassDeclaration:
	Modifiers CLASS IDENTIFIER Super Interfaces ClassBody	{ $$ = create_node("ClassDeclaration", $1, $2, $3, $4, $5, $6); } 
|	CLASS IDENTIFIER Interfaces ClassBody	{ $$ = create_node("ClassDeclaration", $1, $2, $3, $4); } 
|	Modifiers CLASS IDENTIFIER Super ClassBody	{ $$ = create_node("ClassDeclaration", $1, $2, $3, $4, $5); } 
|	Modifiers CLASS IDENTIFIER Interfaces ClassBody	{ $$ = create_node("ClassDeclaration", $1, $2, $3, $4, $5); } 
|	CLASS IDENTIFIER ClassBody	{ $$ = create_node("ClassDeclaration", $1, $2, $3); } 
|	Modifiers CLASS IDENTIFIER ClassBody	{ $$ = create_node("ClassDeclaration", $1, $2, $3, $4); } 
;

Super:
	EXTENDS ClassType	{ $$ = create_node("Super", $1, $2); } 
;

Interfaces:
	IMPLEMENTS InterfaceTypeList	{ $$ = create_node("Interfaces", $1, $2); } 
;

InterfaceTypeList:
	InterfaceType	{ $$ = create_node("InterfaceTypeList", $1); } 
|	InterfaceTypeList COMMA InterfaceType	{ $$ = create_node("InterfaceTypeList", $1, $2, $3); } 
;

ClassBody:
	LMPARA ClassBodyDeclarations RMPARA	{ $$ = create_node("ClassBody", $1, $2, $3); } 
|	LMPARA RMPARA	{ $$ = create_node("ClassBody", $1, $2); } 
;

ClassBodyDeclarations:
	ClassBodyDeclaration	{ $$ = create_node("ClassBodyDeclarations", $1); } 
|	ClassBodyDeclarations ClassBodyDeclaration	{ $$ = create_node("ClassBodyDeclarations", $1, $2); } 
;

ClassBodyDeclaration:
	ClassMemberDeclaration	{ $$ = create_node("ClassBodyDeclaration", $1); } 
|	StaticInitializer	{ $$ = create_node("ClassBodyDeclaration", $1); } 
|	ConstructorDeclaration	{ $$ = create_node("ClassBodyDeclaration", $1); } 
;

ClassMemberDeclaration:
	FieldDeclaration	{ $$ = create_node("ClassMemberDeclaration", $1); } 
|	MethodDeclaration	{ $$ = create_node("ClassMemberDeclaration", $1); } 
;

FieldDeclaration:
	Modifiers Type VariableDeclarators SEMICOLON	{ $$ = create_node("FieldDeclaration", $1, $2, $3, $4); } 
|	Type VariableDeclarator SEMICOLON	{ $$ = create_node("FieldDeclaration", $1, $2, $3); } 
;

VariableDeclarators:
	VariableDeclarator	{ $$ = create_node("VariableDeclarators", $1); } 
|	VariableDeclarators COMMA VariableDeclarator	{ $$ = create_node("VariableDeclarators", $1, $2, $3); } 
;

VariableDeclarator:
	VariableDeclaratorId	{ $$ = create_node("VariableDeclarator", $1); } 
|	VariableDeclaratorId EQUALS VariableInitializer	{ $$ = create_node("VariableDeclarator", $1, $2, $3); } 
;

VariableDeclaratorId:
	IDENTIFIER	{ $$ = create_node("VariableDeclaratorId", $1); } 
|	VariableDeclaratorId LSPAR RSPAR	{ $$ = create_node("VariableDeclaratorId", $1, $2, $3); } 
;

VariableInitializer:
	Expression	{ $$ = create_node("VariableInitializer", $1); } 
|	ArrayInitializer	{ $$ = create_node("VariableInitializer", $1); } 
;

MethodDeclaration:
	MethodHeader MethodBody	{ $$ = create_node("MethodDeclaration", $1, $2); } 
;

MethodHeader:
	Modifiers Type MethodDeclarator Throws	{ $$ = create_node("MethodHeader", $1, $2, $3, $4); } 
|	Modifiers Type MethodDeclarator	{ $$ = create_node("MethodHeader", $1, $2, $3); } 
|	Type MethodDeclarator Throws	{ $$ = create_node("MethodHeader", $1, $2, $3); } 
|	Type MethodDeclarator	{ $$ = create_node("MethodHeader", $1, $2); } 
|	Modifiers VOID MethodDeclarator Throws	{ $$ = create_node("MethodHeader", $1, $2, $3, $4); } 
|	Modifiers VOID MethodDeclarator	{ $$ = create_node("MethodHeader", $1, $2, $3); } 
|	VOID MethodDeclarator Throws	{ $$ = create_node("MethodHeader", $1, $2, $3); } 
|	VOID MethodDeclarator	{ $$ = create_node("MethodHeader", $1, $2); } 
;


MethodDeclarator:
	IDENTIFIER LPAREN FormalParameterList RPAREN	{ $$ = create_node("MethodDeclarator", $1, $2, $3, $4); } 
|	MethodDeclarator LSPAR RSPAR	{ $$ = create_node("MethodDeclarator", $1, $2, $3); } 
|	IDENTIFIER LPAREN RPAREN	{ $$ = create_node("MethodDeclarator", $1, $2, $3); } 
;

FormalParameterList:
	FormalParameter	{ $$ = create_node("FormalParameterList", $1); } 
|	FormalParameterList COMMA FormalParameter	{ $$ = create_node("FormalParameterList", $1, $2, $3); } 
;

FormalParameter:
	Type VariableDeclaratorId	{ $$ = create_node("FormalParameter", $1, $2); } 
;

Throws:
	THROWS ClassTypeList	{ $$ = create_node("Throws", $1, $2); } 
;

ClassTypeList:
	ClassType	{ $$ = create_node("ClassTypeList", $1); } 
|	ClassTypeList COMMA ClassType	{ $$ = create_node("ClassTypeList", $1, $2, $3); } 
;

MethodBody:
	Block 	{ $$ = create_node("MethodBody", $1); } 
|	SEMICOLON	{ $$ = create_node("MethodBody", $1); } 
;


StaticInitializer:
	STATIC Block	{ $$ = create_node("StaticInitializer", $1, $2); } 
;


ConstructorDeclaration:
	Modifiers ConstructorDeclarator Throws ConstructorBody	{ $$ = create_node("ConstructorDeclaration", $1, $2, $3, $4); } 
|	Modifiers ConstructorDeclarator ConstructorBody	{ $$ = create_node("ConstructorDeclaration", $1, $2, $3); } 
|	ConstructorDeclarator Throws ConstructorBody	{ $$ = create_node("ConstructorDeclaration", $1, $2, $3); } 
|	ConstructorDeclarator ConstructorBody		{ $$ = create_node("ConstructorDeclaration", $1, $2); } 
;

ConstructorDeclarator:
	SimpleName LPAREN FormalParameterList RPAREN	{ $$ = create_node("ConstructorDeclarator", $1, $2, $3, $4); } 
|	SimpleName LPAREN RPAREN	{ $$ = create_node("ConstructorDeclarator", $1, $2, $3); } 
;

ConstructorBody:
	LMPARA ExplicitConstructorInvocation BlockStatements RMPARA	{ $$ = create_node("ConstructorBody", $1, $2, $3, $4); } 
|	LMPARA ExplicitConstructorInvocation RMPARA	{ $$ = create_node("ConstructorBody", $1, $2, $3); } 
|	LMPARA BlockStatements RMPARA	{ $$ = create_node("ConstructorBody", $1, $2, $3); } 
|	LMPARA RMPARA	{ $$ = create_node("ConstructorBody", $1, $2); } 
;


ExplicitConstructorInvocation:
	THIS LPAREN ArgumentList RPAREN SEMICOLON	{ $$ = create_node("ExplicitConstructorInvocation", $1, $2, $3, $4, $5); } 
|	THIS LPAREN RPAREN SEMICOLON	{ $$ = create_node("ExplicitConstructorInvocation", $1, $2, $3, $4); } 
|	SUPER LPAREN ArgumentList RPAREN SEMICOLON	{ $$ = create_node("ExplicitConstructorInvocation", $1, $2, $3, $4, $5); } 
|	SUPER LPAREN RPAREN SEMICOLON	{ $$ = create_node("ExplicitConstructorInvocation", $1, $2, $3, $4); } 
;

InterfaceDeclaration:
	Modifiers INTERFACE IDENTIFIER ExtendsInterfaces InterfaceBody	{ $$ = create_node("InterfaceDeclaration", $1, $2, $3, $4, $5); } 
|	Modifiers INTERFACE IDENTIFIER InterfaceBody	{ $$ = create_node("InterfaceDeclaration", $1, $2, $3, $4); } 
|	INTERFACE IDENTIFIER ExtendsInterfaces InterfaceBody	{ $$ = create_node("InterfaceDeclaration", $1, $2, $3, $4); } 
|	INTERFACE IDENTIFIER InterfaceBody	{ $$ = create_node("InterfaceDeclaration", $1, $2, $3); } 
;

ExtendsInterfaces:
	EXTENDS InterfaceType	{ $$ = create_node("ExtendsInterfaces", $1, $2); } 
|	ExtendsInterfaces COMMA InterfaceType	{ $$ = create_node("ExtendsInterfaces", $1, $2, $3); } 
;

InterfaceBody:
	LMPARA InterfaceMemberDeclarations RMPARA	{ $$ = create_node("InterfaceBody", $1, $2, $3); } 
|	LMPARA RMPARA	{ $$ = create_node("InterfaceBody", $1, $2); } 
;

InterfaceMemberDeclarations:
	InterfaceMemberDeclaration	{ $$ = create_node("InterfaceMemberDeclarations", $1); } 
|	InterfaceMemberDeclarations InterfaceMemberDeclaration	{ $$ = create_node("InterfaceMemberDeclarations", $1, $2); } 
;

InterfaceMemberDeclaration:
	ConstantDeclaration	{ $$ = create_node("InterfaceMemberDeclaration", $1); } 
|	AbstractMethodDeclaration	{ $$ = create_node("InterfaceMemberDeclaration", $1); } 
;

ConstantDeclaration:
	FieldDeclaration	{ $$ = create_node("ConstantDeclaration", $1); } 
;

AbstractMethodDeclaration:
	MethodHeader SEMICOLON	{ $$ = create_node("AbstractMethodDeclaration", $1, $2); } 
;


ArrayInitializer:
	LMPARA VariableInitializers COMMA RMPARA	{ $$ = create_node("ArrayInitializer", $1, $2, $3, $4); } 
|	LMPARA VariableInitializers RMPARA	{ $$ = create_node("ArrayInitializer", $1, $2, $3); } 
|	LMPARA COMMA RMPARA	{ $$ = create_node("ArrayInitializer", $1, $2, $3); } 
|	LMPARA RMPARA	{ $$ = create_node("ArrayInitializer", $1, $2); } 
;

VariableInitializers:
	VariableInitializer	{ $$ = create_node("VariableInitializers", $1); } 
|	VariableInitializers COMMA VariableInitializer	{ $$ = create_node("VariableInitializers", $1, $2, $3); } 
;


Block:
	LMPARA BlockStatements RMPARA	{ $$ = create_node("Block", $1, $2, $3); } 
|	LMPARA RMPARA	{ $$ = create_node("Block", $1, $2); } 
;

BlockStatements:
	BlockStatement	{ $$ = create_node("BlockStatements", $1); } 
|	BlockStatements BlockStatement	{ $$ = create_node("BlockStatements", $1, $2); } 
;

BlockStatement:
	LocalVariableDeclarationStatement	{ $$ = create_node("BlockStatement", $1); } 
|	Statement	{ $$ = create_node("BlockStatement", $1); } 
;

LocalVariableDeclarationStatement:
	LocalVariableDeclaration SEMICOLON	{ $$ = create_node("LocalVariableDeclarationStatement", $1, $2); } 
;

LocalVariableDeclaration:
	Type VariableDeclarators	{ $$ = create_node("LocalVariableDeclaration", $1, $2); } 
;

Statement:
	StatementWithoutTrailingSubstatement	{ $$ = create_node("Statement", $1); } 
|	LabeledStatement	{ $$ = create_node("Statement", $1); } 
|	IfThenStatement	{ $$ = create_node("Statement", $1); } 
|	IfThenElseStatement	{ $$ = create_node("Statement", $1); } 
|	WhileStatement	{ $$ = create_node("Statement", $1); } 
|	ForStatement	{ $$ = create_node("Statement", $1); } 
;

StatementNoShortIf:
	StatementWithoutTrailingSubstatement	{ $$ = create_node("StatementNoShortIf", $1); } 
|	LabeledStatementNoShortIf	{ $$ = create_node("StatementNoShortIf", $1); } 
|	IfThenElseStatementNoShortIf	{ $$ = create_node("StatementNoShortIf", $1); } 
|	WhileStatementNoShortIf	{ $$ = create_node("StatementNoShortIf", $1); } 
|	ForStatementNoShortIf	{ $$ = create_node("StatementNoShortIf", $1); } 
;

StatementWithoutTrailingSubstatement:
	Block	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	EmptyStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	ExpressionStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	BreakStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	ContinueStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	ReturnStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	SynchronizedStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	ThrowStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
|	TryStatement	{ $$ = create_node("StatementWithoutTrailingSubstatement", $1); } 
;

EmptyStatement:
	SEMICOLON	{ $$ = create_node("EmptyStatement", $1); } 
;

LabeledStatement:
	IDENTIFIER COLON Statement	{ $$ = create_node("LabeledStatement", $1, $2, $3); } 
;

LabeledStatementNoShortIf:
	IDENTIFIER COLON StatementNoShortIf	{ $$ = create_node("LabeledStatementNoShortIf", $1, $2, $3); } 
;

ExpressionStatement:
	StatementExpression SEMICOLON	{ $$ = create_node("ExpressionStatement", $1, $2); } 
;

StatementExpression:
	Assignment	{ $$ = create_node("StatementExpression", $1); } 
|	PreIncrementExpression	{ $$ = create_node("StatementExpression", $1); } 
|	PreDecrementExpression	{ $$ = create_node("StatementExpression", $1); } 
|	PostIncrementExpression	{ $$ = create_node("StatementExpression", $1); } 
|	PostDecrementExpression	{ $$ = create_node("StatementExpression", $1); } 
|	MethodInvocation	{ $$ = create_node("StatementExpression", $1); } 
|	ClassInstanceCreationExpression	{ $$ = create_node("StatementExpression", $1); } 
;

IfThenStatement:
	IF LPAREN Expression RPAREN Statement	{ $$ = create_node("IfThenStatement", $1, $2, $3, $4, $5); } 
;

IfThenElseStatement:
	IF LPAREN Expression RPAREN StatementNoShortIf ELSE Statement	{ $$ = create_node("IfThenElseStatement", $1, $2, $3, $4, $5, $6, $7); } 
;

IfThenElseStatementNoShortIf:
	IF LPAREN Expression RPAREN StatementNoShortIf ELSE StatementNoShortIf	{ $$ = create_node("IfThenElseStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7); } 
;

WhileStatement:
	WHILE LPAREN Expression RPAREN Statement	{ $$ = create_node("WhileStatement", $1, $2, $3, $4, $5); } 
;

WhileStatementNoShortIf:
	WHILE LPAREN Expression RPAREN StatementNoShortIf	{ $$ = create_node("WhileStatementNoShortIf", $1, $2, $3, $4, $5); } 
;

ForStatement:
	FOR LPAREN ForInit SEMICOLON Expression SEMICOLON ForUpdate RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6, $7, $8, $9); } 
|	FOR LPAREN ForInit SEMICOLON SEMICOLON ForUpdate RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6, $7, $8); } 
|	FOR LPAREN SEMICOLON Expression SEMICOLON ForUpdate RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6, $7, $8); } 
|	FOR LPAREN SEMICOLON SEMICOLON ForUpdate RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6, $7); } 
|	FOR LPAREN ForInit SEMICOLON Expression SEMICOLON RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6, $7, $8); } 
|	FOR LPAREN ForInit SEMICOLON SEMICOLON RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6, $7); } 
|	FOR LPAREN SEMICOLON Expression SEMICOLON RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6, $7); } 
|	FOR LPAREN SEMICOLON SEMICOLON RPAREN Statement	{ $$ = create_node("ForStatement", $1, $2, $3, $4, $5, $6); } 
;

ForStatementNoShortIf:
	FOR LPAREN ForInit SEMICOLON Expression SEMICOLON ForUpdate RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7, $8, $9); } 
|	FOR LPAREN ForInit SEMICOLON SEMICOLON ForUpdate RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7, $8); } 
|	FOR LPAREN SEMICOLON Expression SEMICOLON ForUpdate RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7, $8); } 
|	FOR LPAREN SEMICOLON SEMICOLON ForUpdate RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7); } 
|	FOR LPAREN ForInit SEMICOLON Expression SEMICOLON RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7, $8); } 
|	FOR LPAREN ForInit SEMICOLON SEMICOLON RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7); } 
|	FOR LPAREN SEMICOLON Expression SEMICOLON RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6, $7); } 
|	FOR LPAREN SEMICOLON SEMICOLON RPAREN StatementNoShortIf	{ $$ = create_node("ForStatementNoShortIf", $1, $2, $3, $4, $5, $6); } 
;

ForInit:
	StatementExpressionList	{ $$ = create_node("ForInit", $1); } 
|	LocalVariableDeclaration	{ $$ = create_node("ForInit", $1); } 
;

ForUpdate:
	StatementExpressionList	{ $$ = create_node("ForUpdate", $1); } 
;

StatementExpressionList:
	StatementExpression	{ $$ = create_node("StatementExpressionList", $1); } 
|	StatementExpressionList COMMA StatementExpression	{ $$ = create_node("StatementExpressionList", $1, $2, $3); } 
;

BreakStatement:
	BREAK IDENTIFIER SEMICOLON	{ $$ = create_node("BreakStatement", $1, $2, $3); } 
|	BREAK SEMICOLON	{ $$ = create_node("BreakStatement", $1, $2); } 
;

ContinueStatement:
	CONTINUE IDENTIFIER SEMICOLON	{ $$ = create_node("ContinueStatement", $1, $2, $3); } 
|	CONTINUE SEMICOLON	{ $$ = create_node("ContinueStatement", $1, $2); } 
;

ReturnStatement:
	RETURN Expression SEMICOLON	{ $$ = create_node("ReturnStatement", $1, $2, $3); } 
|	RETURN SEMICOLON	{ $$ = create_node("ReturnStatement", $1, $2); } 
;

ThrowStatement:
	THROW Expression SEMICOLON	{ $$ = create_node("ThrowStatement", $1, $2, $3); } 
;

SynchronizedStatement:
	SYNCHRONIZED LPAREN Expression RPAREN Block	{ $$ = create_node("SynchronizedStatement", $1, $2, $3, $4, $5); } 
;

TryStatement:
	TRY Block Catches	{ $$ = create_node("TryStatement", $1, $2, $3); } 
|	TRY Block Catches Finally	{ $$ = create_node("TryStatement", $1, $2, $3, $4); } 
|	TRY Block Finally	{ $$ = create_node("TryStatement", $1, $2, $3); } 
;


Catches:
	CatchClause	{ $$ = create_node("Catches", $1); } 
|	Catches CatchClause	{ $$ = create_node("Catches", $1, $2); } 
;

CatchClause:
	CATCH LPAREN FormalParameter RPAREN Block	{ $$ = create_node("CatchClause", $1, $2, $3, $4, $5); } 
;

Finally:
	FINALLY Block	{ $$ = create_node("Finally", $1, $2); } 
;

Primary:
	PrimaryNoNewArray	{ $$ = create_node("Primary", $1); } 
|	ArrayCreationExpression	{ $$ = create_node("Primary", $1); } 
;

PrimaryNoNewArray:
	LITERAL	{ $$ = create_node("PrimaryNoNewArray", $1); } 
|	THIS	{ $$ = create_node("PrimaryNoNewArray", $1); } 
|	LPAREN Expression RPAREN	{ $$ = create_node("PrimaryNoNewArray", $1, $2, $3); } 
|	ClassInstanceCreationExpression	{ $$ = create_node("PrimaryNoNewArray", $1); } 
|	FieldAccess	{ $$ = create_node("PrimaryNoNewArray", $1); } 
|	MethodInvocation	{ $$ = create_node("PrimaryNoNewArray", $1); } 
|	ArrayAccess	{ $$ = create_node("PrimaryNoNewArray", $1); } 
;

ClassInstanceCreationExpression:
	NEW ClassType LPAREN ArgumentList RPAREN	{ $$ = create_node("ClassInstanceCreationExpression", $1, $2, $3, $4, $5); } 
|	NEW ClassType LPAREN RPAREN	{ $$ = create_node("ClassInstanceCreationExpression", $1, $2, $3, $4); } 
;

ArgumentList:
	Expression	{ $$ = create_node("ArgumentList", $1); } 
|	ArgumentList COMMA Expression	{ $$ = create_node("ArgumentList", $1, $2, $3); } 
;

ArrayCreationExpression:
	NEW PrimitiveType DimExprs Dims	{ $$ = create_node("ArrayCreationExpression", $1, $2, $3, $4); } 
|	NEW PrimitiveType DimExprs	{ $$ = create_node("ArrayCreationExpression", $1, $2, $3); } 
|	NEW ClassOrInterfaceType DimExprs Dims	{ $$ = create_node("ArrayCreationExpression", $1, $2, $3, $4); } 
|	NEW ClassOrInterfaceType DimExprs	{ $$ = create_node("ArrayCreationExpression", $1, $2, $3); } 
;

DimExprs:
	DimExpr	{ $$ = create_node("DimExprs", $1); } 
|	DimExprs DimExpr	{ $$ = create_node("DimExprs", $1, $2); } 
;

DimExpr:
	LSPAR Expression RSPAR	{ $$ = create_node("DimExpr", $1, $2, $3); } 
;

Dims:
	LSPAR RSPAR	{ $$ = create_node("Dims", $1, $2); } 
|	Dims LSPAR RSPAR	{ $$ = create_node("Dims", $1, $2, $3); } 
;

FieldAccess:
	Primary DOT IDENTIFIER	{ $$ = create_node("FieldAccess", $1, $2, $3); } 
|	SUPER DOT IDENTIFIER	{ $$ = create_node("FieldAccess", $1, $2, $3); } 
;

MethodInvocation:
	Name LPAREN ArgumentList RPAREN	{ $$ = create_node("MethodInvocation", $1, $2, $3, $4); } 
|	Name LPAREN RPAREN	{ $$ = create_node("MethodInvocation", $1, $2, $3); } 
|	Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN	{ $$ = create_node("MethodInvocation", $1, $2, $3, $4, $5, $6); } 
|	Primary DOT IDENTIFIER LPAREN RPAREN	{ $$ = create_node("MethodInvocation", $1, $2, $3, $4, $5); } 
|	SUPER DOT IDENTIFIER LPAREN ArgumentList RPAREN	{ $$ = create_node("MethodInvocation", $1, $2, $3, $4, $5, $6); } 
|	SUPER DOT IDENTIFIER LPAREN RPAREN	{ $$ = create_node("MethodInvocation", $1, $2, $3, $4, $5); } 
;


ArrayAccess:
	Name LSPAR Expression RSPAR	{ $$ = create_node("ArrayAccess", $1, $2, $3, $4); } 
|	PrimaryNoNewArray LSPAR Expression RSPAR	{ $$ = create_node("ArrayAccess", $1, $2, $3, $4); } 
;

PostfixExpression:
	Primary	{ $$ = create_node("PostfixExpression", $1); } 
|	Name	{ $$ = create_node("PostfixExpression", $1); } 
|	PostIncrementExpression	{ $$ = create_node("PostfixExpression", $1); } 
|	PostDecrementExpression	{ $$ = create_node("PostfixExpression", $1); } 
;

PostIncrementExpression:
	PostfixExpression PLUS_PLUS	{ $$ = create_node("PostIncrementExpression", $1, $2); } 
;

PostDecrementExpression:
	PostfixExpression MINUS_MINUS	{ $$ = create_node("PostDecrementExpression", $1, $2); } 
;

UnaryExpression:
	PreIncrementExpression	{ $$ = create_node("UnaryExpression", $1); } 
|	PreDecrementExpression	{ $$ = create_node("UnaryExpression", $1); } 
|	PLUS UnaryExpression	{ $$ = create_node("UnaryExpression", $1, $2); } 
|	MINUS UnaryExpression	{ $$ = create_node("UnaryExpression", $1, $2); } 
|	UnaryExpressionNotPlusMinus	{ $$ = create_node("UnaryExpression", $1); } 
;

PreIncrementExpression:
	PLUS_PLUS UnaryExpression	{ $$ = create_node("PreIncrementExpression", $1, $2); } 
;

PreDecrementExpression:
	MINUS_MINUS UnaryExpression	{ $$ = create_node("PreDecrementExpression", $1, $2); } 
;

UnaryExpressionNotPlusMinus:
	PostfixExpression	{ $$ = create_node("UnaryExpressionNotPlusMinus", $1); } 
|	TILDE UnaryExpression	{ $$ = create_node("UnaryExpressionNotPlusMinus", $1, $2); } 
|	NOT UnaryExpression	{ $$ = create_node("UnaryExpressionNotPlusMinus", $1, $2); } 
|	CastExpression	{ $$ = create_node("UnaryExpressionNotPlusMinus", $1); } 
;

CastExpression:
	LPAREN PrimitiveType Dims RPAREN UnaryExpression	{ $$ = create_node("CastExpression", $1, $2, $3, $4, $5); } 
|	LPAREN PrimitiveType RPAREN UnaryExpression	{ $$ = create_node("CastExpression", $1, $2, $3, $4); } 
|	LPAREN Expression RPAREN UnaryExpressionNotPlusMinus	{ $$ = create_node("CastExpression", $1, $2, $3, $4); } 
|	LPAREN Name Dims RPAREN UnaryExpressionNotPlusMinus	{ $$ = create_node("CastExpression", $1, $2, $3, $4, $5); } 
;

MultiplicativeExpression:
	UnaryExpression	{ $$ = create_node("MultiplicativeExpression", $1); } 
|	MultiplicativeExpression TIMES UnaryExpression	{ $$ = create_node("MultiplicativeExpression", $1, $2, $3); } 
|	MultiplicativeExpression DIVIDE UnaryExpression	{ $$ = create_node("MultiplicativeExpression", $1, $2, $3); } 
|	MultiplicativeExpression MOD UnaryExpression	{ $$ = create_node("MultiplicativeExpression", $1, $2, $3); } 
;

AdditiveExpression:
	MultiplicativeExpression	{ $$ = create_node("AdditiveExpression", $1); } 
|	AdditiveExpression PLUS MultiplicativeExpression	{ $$ = create_node("AdditiveExpression", $1, $2, $3); } 
|	AdditiveExpression MINUS MultiplicativeExpression	{ $$ = create_node("AdditiveExpression", $1, $2, $3); } 
;

ShiftExpression:
	AdditiveExpression	{ $$ = create_node("ShiftExpression", $1); } 
|	ShiftExpression LEFT_SHIFT AdditiveExpression	{ $$ = create_node("ShiftExpression", $1, $2, $3); } 
|	ShiftExpression RIGHT_SHIFT AdditiveExpression	{ $$ = create_node("ShiftExpression", $1, $2, $3); } 
|	ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression	{ $$ = create_node("ShiftExpression", $1, $2, $3); } 
;

RelationalExpression:
	ShiftExpression	{ $$ = create_node("RelationalExpression", $1); } 
|	RelationalExpression LT ShiftExpression	{ $$ = create_node("RelationalExpression", $1, $2, $3); } 
|	RelationalExpression GT ShiftExpression	{ $$ = create_node("RelationalExpression", $1, $2, $3); } 
|	RelationalExpression LE ShiftExpression	{ $$ = create_node("RelationalExpression", $1, $2, $3); } 
|	RelationalExpression GE ShiftExpression	{ $$ = create_node("RelationalExpression", $1, $2, $3); } 
|	RelationalExpression INSTANCEOF ReferenceType	{ $$ = create_node("RelationalExpression", $1, $2, $3); } 
;

EqualityExpression:
	RelationalExpression	{ $$ = create_node("EqualityExpression", $1); } 
|	EqualityExpression EQUALS_EQUALS RelationalExpression	{ $$ = create_node("EqualityExpression", $1, $2, $3); } 
|	EqualityExpression NOT_EQUALS RelationalExpression	{ $$ = create_node("EqualityExpression", $1, $2, $3); } 
;
AndExpression:
	EqualityExpression	{ $$ = create_node("AndExpression", $1); } 
|	AndExpression BITWISE_AND EqualityExpression	{ $$ = create_node("AndExpression", $1, $2, $3); } 
;

ExclusiveOrExpression:
	AndExpression	{ $$ = create_node("ExclusiveOrExpression", $1); } 
|	ExclusiveOrExpression XOR AndExpression	{ $$ = create_node("ExclusiveOrExpression", $1, $2, $3); } 
;

InclusiveOrExpression:
	ExclusiveOrExpression	{ $$ = create_node("InclusiveOrExpression", $1); } 
|	InclusiveOrExpression BITWISE_OR ExclusiveOrExpression	{ $$ = create_node("InclusiveOrExpression", $1, $2, $3); } 
;

ConditionalAndExpression:
	InclusiveOrExpression	{ $$ = create_node("ConditionalAndExpression", $1); } 
|	ConditionalAndExpression AND InclusiveOrExpression	{ $$ = create_node("ConditionalAndExpression", $1, $2, $3); } 
;

ConditionalOrExpression:
	ConditionalAndExpression	{ $$ = create_node("ConditionalOrExpression", $1); } 
|	ConditionalOrExpression OR ConditionalAndExpression	{ $$ = create_node("ConditionalOrExpression", $1, $2, $3); } 
;

ConditionalExpression:
	ConditionalOrExpression	{ $$ = create_node("ConditionalExpression", $1); } 
|	ConditionalOrExpression QUESTION Expression COLON ConditionalExpression	{ $$ = create_node("ConditionalExpression", $1, $2, $3, $4, $5); } 
;

AssignmentExpression:
	ConditionalExpression	{ $$ = create_node("AssignmentExpression", $1); } 
|	Assignment	{ $$ = create_node("AssignmentExpression", $1); } 
;

Assignment:
	LeftHandSide AssignmentOperator AssignmentExpression	{ $$ = create_node("Assignment", $1, $2, $3); } 
;

LeftHandSide:
	Name	{ $$ = create_node("LeftHandSide", $1); } 
|	FieldAccess	{ $$ = create_node("LeftHandSide", $1); } 
|	ArrayAccess	{ $$ = create_node("LeftHandSide", $1); } 
;

AssignmentOperator: 
	EQUALS 	{ $$ = create_node("AssignmentOperator", $1); } 
|	TIMES_EQUALS 	{ $$ = create_node("AssignmentOperator", $1); } 
|	DIVIDE_EQUALS	{ $$ = create_node("AssignmentOperator", $1); } 
|	MOD_EQUALS 	{ $$ = create_node("AssignmentOperator", $1); } 
|	PLUS_EQUALS 	{ $$ = create_node("AssignmentOperator", $1); } 
|	MINUS_EQUALS 	{ $$ = create_node("AssignmentOperator", $1); } 
|	LEFT_SHIFT_EQUALS RIGHT_SHIFT_EQUALS UNSIGNED_RIGHT_SHIFT_EQUALS 	{ $$ = create_node("AssignmentOperator", $1, $2, $3); } 
|	AND_EQUALS 	{ $$ = create_node("AssignmentOperator", $1); } 
|	XOR_EQUALS 	{ $$ = create_node("AssignmentOperator", $1); } 
|	OR_EQUALS	{ $$ = create_node("AssignmentOperator", $1); } 
;

Expression:
	AssignmentExpression	{ $$ = create_node("Expression", $1); } 

